(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\helpers\\shims.js":[function(require,module,exports){
Array.prototype.forEach||(Array.prototype.forEach=function(t,e){var n,r;if(null==this)throw new TypeError(" this is null or not defined");var o=Object(this),i=o.length>>>0;if("function"!=typeof t)throw new TypeError(t+" is not a function");for(e&&(n=e),r=0;i>r;){var a;r in o&&(a=o[r],t.call(n,a,r,o)),r++}}),Array.prototype.filter||(Array.prototype.filter=function(t){"use strict";if(void 0===this||null===this)throw new TypeError;var e=Object(this),n=e.length>>>0;if("function"!=typeof t)throw new TypeError;for(var r=[],o=arguments.length>=2?arguments[1]:void 0,i=0;n>i;i++)if(i in e){var a=e[i];t.call(o,a,i,e)&&r.push(a)}return r}),"map"in Array.prototype||(Array.prototype.map=function(t,e){for(var n=this.length>>>0,r=Array(n),o=0;n>o;o++)o in this&&(r[o]=t.call(e,this[o],o,this));return r}),Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),n=this,r=function(){},o=function(){return n.apply(this instanceof r&&t?this:t,e.concat(Array.prototype.slice.call(arguments)))};return r.prototype=this.prototype,o.prototype=new r,o}),this.Element&&Element.prototype.attachEvent&&!Element.prototype.addEventListener&&function(){function t(t,e){Window.prototype[t]=HTMLDocument.prototype[t]=Element.prototype[t]=e}function e(){e.interval&&document.body&&(e.interval=clearInterval(e.interval),document.dispatchEvent(new CustomEvent("DOMContentLoaded")))}t("addEventListener",function(t,e){var n=this,r=n.addEventListener.listeners=n.addEventListener.listeners||{},o=r[t]=r[t]||[];o.length||n.attachEvent("on"+t,o.event=function(t){var e=n.document&&n.document.documentElement||n.documentElement||{scrollLeft:0,scrollTop:0};t.currentTarget=n,t.pageX=t.clientX+e.scrollLeft,t.pageY=t.clientY+e.scrollTop,t.preventDefault=function(){t.returnValue=!1},t.relatedTarget=t.fromElement||null,t.stopImmediatePropagation=function(){l=!1,t.cancelBubble=!0},t.stopPropagation=function(){t.cancelBubble=!0},t.target=t.srcElement||n,t.timeStamp=+new Date;for(var r,i=0,a=[].concat(o),l=!0;l&&(r=a[i]);++i)for(var c,s=0;c=o[s];++s)if(c==r){c.call(n,t);break}}),o.push(e)}),t("removeEventListener",function(t,e){for(var n,r=this,o=r.addEventListener.listeners=r.addEventListener.listeners||{},i=o[t]=o[t]||[],a=i.length-1;n=i[a];--a)if(n==e){i.splice(a,1);break}!i.length&&i.event&&r.detachEvent("on"+t,i.event)}),t("dispatchEvent",function(t){var e=this,n=t.type,r=e.addEventListener.listeners=e.addEventListener.listeners||{},o=r[n]=r[n]||[];try{return e.fireEvent("on"+n,t)}catch(i){return o.event&&o.event(t),void 0}}),Object.defineProperty(Window.prototype,"CustomEvent",{get:function(){var t=this;return function(e,n){var r,o=t.document.createEventObject();o.type=e;for(r in n)"cancelable"==r?o.returnValue=!n.cancelable:"bubbles"==r?o.cancelBubble=!n.bubbles:"detail"==r&&(o.detail=n.detail);return o}}}),e.interval=setInterval(e,1),window.addEventListener("load",e)}(),!this.CustomEvent&&function(){window.CustomEvent=function(t,e){var n;e=e||{bubbles:!1,cancelable:!1,detail:void 0};try{n=document.createEvent("CustomEvent"),n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail)}catch(r){n=document.createEvent("Event"),n.initEvent(t,e.bubbles,e.cancelable),n.detail=e.detail}return n}}();

},{}],"c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\modules\\UI.js":[function(require,module,exports){
module.exports={init:function(){console.debug("KO.UI module is being initialised")}};

},{}],"c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\script.js":[function(require,module,exports){
require("./helpers/shims");var KO={Config:{init:function(){KO.UI=require("./modules/UI"),KO.UI.init()}}};KO.Config.init();

},{"./helpers/shims":"c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\helpers\\shims.js","./modules/UI":"c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\modules\\UI.js"}]},{},["c:\\Development\\GitHub\\djmelonz.github.io\\assets\\src\\js\\script.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
